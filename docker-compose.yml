version: "3.8"

services:
  # Frontend Service
  frontend:
    build:
      context: ./client
      dockerfile: ../Dockerfile.frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://backend:8000
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./server
      dockerfile: ../Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
      - backend_logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - DATABASE_URL=postgresql://user:password@db:5432/ml_trainer
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=ml_trainer
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker for async tasks
  celery_worker:
    build:
      context: ./server
      dockerfile: ../Dockerfile.backend
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
      - celery_logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - DATABASE_URL=postgresql://user:password@db:5432/ml_trainer
      - REDIS_URL=redis://redis:6379/0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      - db
      - redis

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./server
      dockerfile: ../Dockerfile.backend
    command: celery -A app.celery_app beat --loglevel=info
    volumes:
      - celery_logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/ml_trainer
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  # Flower for monitoring Celery tasks
  flower:
    build:
      context: ./server
      dockerfile: ../Dockerfile.backend
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - celery_worker

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    depends_on:
      - prometheus

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  frontend_logs:
  backend_logs:
  celery_logs:
  prometheus_data:
  grafana_data:
